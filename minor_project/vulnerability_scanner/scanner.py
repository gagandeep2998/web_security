#!/usr/bin/env python

import requests
import re
import urllib.parse as urlparse
from bs4 import BeautifulSoup
from colors import GREEN, RESET
from banners import scanner


print(GREEN, scanner, RESET)


class Scanner:
    def __init__(self, url, ignore_links):
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.links_to_ignore = ignore_links

    def extract_link_from(self, url):
        response = self.session.get(url)
        return re.findall('(?:href=")(.*?)"', response.content.decode(errors="ignore"))

    def crawl(self, url=None):
        if url == None:
            url = self.target_url
        href_links = self.extract_link_from(url)
        # print(href_links)
        for link in href_links:
            link = urlparse.urljoin(url, link)
            if "#" in link:
                link = link.split('#')[0]
            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                self.target_links.append(link)
                print(link)
                self.crawl(link)

    def extract_form(self, url):
        response = self.session.get(url)
        # print(response.content)
        parsed_html = BeautifulSoup(response.content, features="lxml")
        return parsed_html.findAll("form")

    def submit_for(self, form, value, url):
        action = form.get("action")
        post_url = urlparse.urljoin(url, action)
        print(post_url)
        # print(action)
        method = form.get("method")
        # print(method)

        input_lists = form.findAll("input")
        post_data = {}
        for input in input_lists:
            input_name = input.get("name")
            # print(input_name)
            input_type = input.get("type")
            input_value = input.get("value")
            if input_type == "text":
                input_value = value
            post_data[input_name] = input_value
        if method == "post":
            return self.session.post(post_url, data=post_data)
        return self.session.get(post_url, params=post_data)

    def run_scanner(self):
        for link in self.target_links:
            forms = self.extract_form(link)
            for form in forms:
                print(GREEN, "\n\n[+] Testing form in " + link, RESET)
                is_vulnerable_to_xss = self.test_xss_in_form(form, link)
                if is_vulnerable_to_xss:
                    print(GREEN, '\n\n[***] XSS discovered in ' + link + " in the following form ", RESET)
                    print(form)

                is_vulnerable_to_command_execution = self.test_command_execution(form, link)
                if is_vulnerable_to_command_execution:
                    print(GREEN, '\n\n[*] command execution discovered in ' + link + " in the following form ", RESET)
                    print(form)
                is_vulnerable_to_sql_injection = self.test_sql_injection(form, link)
                if is_vulnerable_to_sql_injection:
                    print(GREEN, '\n\n[*] SQL injection discovered in ' + link + ' in the following form ', RESET)
                    print(GREEN, form, RESET)

            if "=" in link:
                print(GREEN, "\n\n[+] Testing " + link, RESET)
                is_vulnerable_to_xss = self.test_xss_in_link(link)
                if is_vulnerable_to_xss:
                    print(GREEN, "\n\n[***] Discovered XSS in link " + link, RESET)

    def test_xss_in_form(self, form, url):
        xss_test_script = "<sCript>alert('test')</scriPt>"
        response = self.submit_for(form, xss_test_script, url)
        return xss_test_script in response.content.decode(errors='ignore')

    def test_xss_in_link(self, url):
        xss_test_script = "<sCript>alert('test')</scriPt>"
        url = url.replace("=", "=" + xss_test_script)
        response = self.session.get(url)
        return xss_test_script in response.content.decode(errors='ignore')

    def test_command_execution(self, form, url):
        command_execution_test = "10.0.2.15 | pwd"
        response = self.submit_for(form, command_execution_test, url)
        return "/var/" in response.content.decode(errors='ignore')

    def test_sql_injection(self, form, url):
        sql_injection_test = "\'"
        response = self.submit_for(form, sql_injection_test, url)
        return "SQL syntax" in response.content.decode(errors='ignore')
